
// NOTE - BEWARE: INTEREST COLUMNS CANNOT HAVE ', NEWLINES or / !!

// The following are discovered automatically - if not 0, they are set by user, beware!
var INTERESTLISTSTARTINGROW = 0  // The row where the interests reside
var INTERESTLISTSTARTINGCOL = 0  // The column where interests end
var INTERESTCOUNT = 0;           // How many columns of interest / checkmarks
var EMAILCOLUMN = 0;             // Column containing the word 'Email' (case insensitive)
var NAMECOLUMN = 0;              // Where we draw 'Hi <NAME>, from

function findCheckboxColumns() {
  var lastRow = sheet.getLastRow();
  var lastColumn = sheet.getLastColumn();
  var firstcheckboxcell = null;

  // Iterate through all cells in the sheet
  for (var r = 1; r <= lastRow; r++) {
    for (var c = 1; c <= lastColumn; c++) {
      var cell = sheet.getRange(r, c);
      var rule = cell.getDataValidation();
      var firstcheckboxcell = null;

      // Check if the cell has a data validation rule
      if (rule != null) {
        var criteria = rule.getCriteriaType();
        // If the criteria type is CHECKBOX, then it's a checkbox cell
        if (criteria === SpreadsheetApp.DataValidationCriteria.CHECKBOX) {
          Logger.log("First checkbox column found at: " + cell.getA1Notation() + " (coords: " + [r,c] +")");
          firstcheckboxcell = [r, c];
          break;
        }
      }
    }
    if (firstcheckboxcell != null) break;
  }

  if (firstcheckboxcell == null) {
    Browser.msgBox("No checkboxes found in the sheet. Cannot add AUTOEMAIL menu!.");
    return 1;
  } 
  
  var checkboxcellrow = firstcheckboxcell[0];
  var checkboxcellcolstart = firstcheckboxcell[1];
  var lastColumn = sheet.getLastColumn();
  var rowRange = sheet.getRange(checkboxcellrow, 1, 1, lastColumn); // Get the entire first row with checkboxes
  var dataValidations = rowRange.getDataValidations();

  // Iterate from the last column backwards to find the last checkbox
  for (var col = lastColumn; col >= 1; col--) {
    var cellValidation = dataValidations[0][col - 1]; // dataValidations is a 2D array, row 0 for our single rowRange
    if (cellValidation && cellValidation.getCriteriaType() === SpreadsheetApp.DataValidationCriteria.CHECKBOX) {
      // Found a checkbox, return the A1 notation of the cell

      Logger.log("Last checkbox column found at: " + sheet.getRange(checkboxcellrow, col).getA1Notation());
      break;
    }
  }
  
  // If these have values already, they are user set and we respect that
  if (INTERESTLISTSTARTINGROW == 0) INTERESTLISTSTARTINGROW = checkboxcellrow - 1; // The interest list is right above the first line with check boxes
  if (INTERESTLISTSTARTINGCOL == 0) INTERESTLISTSTARTINGCOL = checkboxcellcolstart;
  if (INTERESTCOUNT == 0) INTERESTCOUNT = col - checkboxcellcolstart + 1;
 
  Logger.log("Interest column count is " + INTERESTCOUNT)
  return 0
}


function findEmailColumn() {
  // Create a "TextFinder" to search for the word 'email', ignore case and match the entire cell's content.
  const textFinder = sheet.createTextFinder('email').matchCase(false).matchEntireCell(true);
  
  // Execute the search to find the first occurrence.
  const firstResult = textFinder.findNext();
  
  // Check if a result was found and return its location, assign EMAILCOLUMN
  if (firstResult) {
    // If a cell is found, return its A1 notation (e.g., "C1").
    EMAILCOLUMN=firstResult.getColumn() - 1
    Logger.log("Email column index is " + EMAILCOLUMN);
    return 0
  }
  
  Browser.msgBox("'email' column was not found in the sheet. Cannot add AUTOEMAIL menu!");
  return 1
}


function findNameColumn() {
  var textFinder = sheet.createTextFinder('First Name').matchCase(false).matchEntireCell(true);
  var firstResult = textFinder.findNext();
  
  // Check if a result was found and return its location, assign NAMECOLUMN
  if (firstResult) {
    // If a cell is found, return its A1 notation (e.g., "C1").
    NAMECOLUMN=firstResult.getColumn() - 1
    Logger.log("First name column index is " + NAMECOLUMN);
    return 0
  } 
  
  // So we didn't find 'First Name' - Now we just try 'Name'
  var textFinder = sheet.createTextFinder('Name').matchCase(false).matchEntireCell(true);
  var firstResult = textFinder.findNext();
  if (firstResult) {
    // If a cell is found, return its A1 notation (e.g., "C1").
    NAMECOLUMN=firstResult.getColumn() - 1
    Logger.log("Name column index is " + NAMECOLUMN);
    return 0
  } 

  // So we didn't find 'First Name' or 'Name' - Now we just try 'Full Name'  - last chance...
  var textFinder = sheet.createTextFinder('Full Name').matchCase(false).matchEntireCell(true);
  var firstResult = textFinder.findNext();
  if (firstResult) {
    // If a cell is found, return its A1 notation (e.g., "C1").
    NAMECOLUMN=firstResult.getColumn() - 1
    Logger.log("Full Name column index is " + NAMECOLUMN);
    return 0
  } 
  
  // No NAME in this sheet that we can use...
  Browser.msgBox("'First Name', 'Full Name' or 'Name' column was not found in the sheet. Cannot add AUTOEMAIL menu!");
  return 1
}


function generateSelection() {  
  //Courtesy of https://spreadsheet.dev/find-out-which-menu-item-selected-custom-menu-apps-script
  var caller = generateSelection.caller.toString();
  var startIndex = caller.indexOf("return", 0) + 7; // 7 is the size of the word return!
  var endIndex = caller.indexOf("(...arguments);");
  var callerFunction = caller.slice(startIndex, endIndex);
  var emailsubject = null;
  var emailbody = null; // unused until further notice

  // At this point, the user chose a column name and it's something like "Application_Services"
  // We need to find the column with that name and the ticked emails for that column
  const headerRowValues = sheet.getRange(INTERESTLISTSTARTINGROW, 1, 1, sheet.getLastColumn()).getValues()[0];
  
  // columnIndex is the number of the column, starting from 0...
  const ui = SpreadsheetApp.getUi();
  const columnIndex = headerRowValues.indexOf(callerFunction.replace(/_/g,' ')); // I don't like this... but there
  var allcontacts = sheet.getDataRange().getValues()
  var emaillist = [];

  for (var i = 1; i < allcontacts.length; i++) {
    var row = allcontacts[i];
    
    if (row[columnIndex] === true) {
      // Condition met, now select the target cell in this row

      if (emailsubject == null) {
          emailsubject = ui.prompt("Enter the 'subject:' for the mailout:").getResponseText()
          // emailbody = ui.prompt("Enter the body text for the mailout:").getResponseText()  // Only does text, no HTML!
      }
 
      emailaddress = row[EMAILCOLUMN];   

      if (emailaddress != "") {
        emaillist.push(emailaddress) // We track a list of the email addresses drafted to so we can count them, and who knows what else?

        var recipientfirstname = row[NAMECOLUMN].trimEnd();
        var htmlcontent = "<p>Hi " + recipientfirstname + ",<br><br>"; // This has the virtue of changing the email format from plain text to rich text!

        GmailApp.createDraft(
          emailaddress,
          emailsubject,
          "",
          {
            htmlBody: htmlcontent 
          } 
        )
      }
    }
  }
  
  if (emaillist.length != 0) {
    Browser.msgBox(emaillist.length + " email drafts generated - awaiting sending\\n(Check your Drafts folder in GMail).")
  } else {
    Browser.msgBox("No matches found - no email drafts generated.")
  }
}

function buildMenu(option) {
  menu.addItem(option, option.replace(/ /g,'_'));

}

function onOpen() {
  // Has to exist!
}


// As the eval var's for the unknown functions need to be global, there is no onOpen
var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
var menu = null;
var menuvalues = null;

var resultcb = findCheckboxColumns(); // The count of "interests", also sets INTERESTLISTSTARTINGROW,INTERESTLISTSTARTINGCOL
var resultec = findEmailColumn(); // sets EMAILCOLUMN
var resultnc = findNameColumn();  // sets NAMECOLUMN

if (resultcb == 0 && resultec == 0 && resultnc == 0) {
  menuvalues = sheet.getRange(INTERESTLISTSTARTINGROW,INTERESTLISTSTARTINGCOL,1,INTERESTCOUNT).getValues()[0];
  menu = SpreadsheetApp.getUi().createMenu('ðŸ“© Create email drafts from list');
    
  Logger.log("Interest column titles are: " + menuvalues);

  for (let i = 0; i < menuvalues.length; i++)  
   eval('var ' + menuvalues[i].replace(/ /g,'_') + ' = generateSelection');

  menuvalues.forEach(buildMenu); 
  menu.addToUi();

} else {
  if (resultcb != 0) Logger.log ("Failed to create menu - findCheckboxColumns returned " + resultcb)
  if (resultec != 0) Logger.log ("Failed to create menu - findEmailColumn returned " + resultec);
  if (resultnc != 0) Logger.log ("Failed to create menu - findNameColumn returned " + resultnc);
}


